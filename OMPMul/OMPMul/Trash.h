#pragma once
struct InvData
{
	int n;
	int r;
	const char * name;
	InvData(const char * name, int n, int r) : n(n), r(r), name(name){};
};
void measure(void(*measure_invocation)(void(*ff)(), InvData));
void clean_100();
void measure_invocation_100(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_150();
void measure_invocation_150(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_200();
void measure_invocation_200(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_250();
void measure_invocation_250(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_300();
void measure_invocation_300(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_350();
void measure_invocation_350(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_400();
void measure_invocation_400(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_450();
void measure_invocation_450(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_500();
void measure_invocation_500(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_550();
void measure_invocation_550(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_600();
void measure_invocation_600(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_650();
void measure_invocation_650(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_700();
void measure_invocation_700(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_750();
void measure_invocation_750(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_800();
void measure_invocation_800(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_850();
void measure_invocation_850(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_900();
void measure_invocation_900(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_950();
void measure_invocation_950(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1000();
void measure_invocation_1000(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1050();
void measure_invocation_1050(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1100();
void measure_invocation_1100(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1150();
void measure_invocation_1150(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1200();
void measure_invocation_1200(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1250();
void measure_invocation_1250(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1300();
void measure_invocation_1300(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1350();
void measure_invocation_1350(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1400();
void measure_invocation_1400(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1450();
void measure_invocation_1450(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
void clean_1500();
void measure_invocation_1500(void(*f)(), InvData data, void(*callback)(void(*ff)(), InvData));
